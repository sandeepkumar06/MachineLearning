import pandas as pd 
from sklearn.preprocessing import StandardScaler
from sklearn import linear_model
#from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.decomposition import TruncatedSVD

import matplotlib.pyplot as plt

# Importing the dataset
dataset = pd.read_csv('signaldataset3.csv')
df_x = dataset.iloc[:, 0:10].values
df_y = dataset.iloc[:, 10].values
df_y=df_y.astype('int')

print(dataset)
reg = linear_model.LinearRegression()
x_train,x_test,y_train,y_test = train_test_split(df_x,df_y,test_size=0.2,random_state=4)
reg.fit(x_train,y_train)


print(reg.score(x_test,y_test))

print(df_x.shape)
#applying svd 
svd= TruncatedSVD(n_components = 2)
y=svd.fit(df_x).transform(df_x)
print(y)

plt.title('Plotting of data using SVD')
plt.scatter(x=y[:,0], y=y[:,1],s=30,alpha=0.5) #blue
plt.scatter(df_x[:, 0], df_x[:, 1],s=30,alpha=0.2) #orange
plt.axis('equal');

plt.show()  

# Print the number of features
print('Original number of features: %s ', str(df_x.shape[1]))
print('Reduced number of features: %s', str(y.shape[1]))
## View the ratio of explained variance
print('explained variance ratio : %s ', str(svd.explained_variance_ratio_))

print(svd.explained_variance_)
#finding Linear Regression after SVD
scaler = StandardScaler()
# Fit on training set only.
scaler.fit(x_train)
# Apply transform to both the training set and the test set.
x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)

# Make an instance of the Model
#svd =svd(.95)
svd.fit(x_train)
#print (svd.n_components_)

x_train = svd.transform(x_train)
x_test = svd.transform(x_test)



#finding Linear Regression after PCA
reg = linear_model.LinearRegression()

reg.fit(x_train,y_train)

print(reg.score(x_test,y_test))
print(reg.predict(x_test))


# Standardize the feature matrix
X = StandardScaler().fit_transform(x_train)
from scipy.sparse import csr_matrix
# Make sparse matrix
X_sparse = csr_matrix(X)

# Create and run an TSVD with one less than number of features
tsvd = TruncatedSVD(n_components=X_sparse.shape[1]-1)
X_tsvd = tsvd.fit(X)
# List of explained variances
tsvd_var_ratios = tsvd.explained_variance_ratio_
#Create Function Calculating Number Of Components Required To Pass Threshold
# Create a function

    # Set initial variance explained so far
total_variance = 0.0
    
    # Set initial number of features
n_components = 0

goal_var= 0.95
    # For the explained variance of each feature:
for explained_variance in tsvd_var_ratios:
        
        # Add the explained variance to the total
        total_variance += explained_variance
        
        # Add one to the number of components
        n_components += 1
        
        # If we reach our goal level of explained variance
        if total_variance >= goal_var:
            # End the loop
            break
            
    # Return the number of components
print (n_components)
